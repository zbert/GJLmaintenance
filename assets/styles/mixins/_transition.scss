/// Multiple transitions
/// Define in any number of transitions
/// @access public
/// @param {*} $transitions... - List of transitions
/// @example scss - Usage
///
///   .foo {
///     @include transition(color);
///   }
///   .bar {
///     @include transition(width, height 0.3s ease-in-out);
///   }
/// @example css - Result
///   .foo {
///     transition: color 0.3s cubic-bezier(0.19, 1, 0.22, 1);
///   }
///   .bar {
///     transition: width 0.2s cubic-bezier(0.19, 1, 0.22, 1), height 0.3s ease-in-out;
///   }


@mixin transition($transitions...) {
  $unfoldedTransitions: ();
  @each $transition in $transitions {
    $unfoldedTransitions: append($unfoldedTransitions, unfoldTransition($transition), comma);
  }

  transition: $unfoldedTransitions;
}

@function unfoldTransition ($transition) {
  // Default values
  $property: all;
  $duration: $transition__duration;
  $easing: $transition__easing;
  $delay: null; // Browser default is 0, which is what we want
  $defaultProperties: ($property, $duration, $easing, $delay);

  // Grab transition properties if they exist
  $unfoldedTransition: ();
  @for $i from 1 through length($defaultProperties) {
    $p: null;
    @if $i <= length($transition) {
      $p: nth($transition, $i)
    } @else {
      $p: nth($defaultProperties, $i)
    }
    $unfoldedTransition: append($unfoldedTransition, $p);
  }

  @return $unfoldedTransition;
}
